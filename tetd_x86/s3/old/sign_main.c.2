#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include "bignum.h"

extern void sha256_ni_transform(uint8_t *hash, const uint8_t *data, size_t blocks);

/* --------------------- RSA-3072 CRT 参数 --------------------- */

// modulus n
static const char *hex_n =
  "be18818a7e95c519e0be692f0ca7f4a6da1522e2d40f0a256ee5d073d9230215"
  "b4566c6951a70b3b667ab7f893f6bbff3ac88173694d6c31cee8c2f263772720"
  "080b44656c690ef50fd579da476e2dc76fd4be713b68854b645828130aae5e57"
  "da604c45811fff3f368405d8ef8fbaf3904e934d55a273cf607b3f7b48dcc9ea"
  "6886f62091da7a68368d98685152dfe30927c18df8ab072ef2d81d8d44e92e8e"
  "f5a385ee45bdab8cd0b6588b53b5e6644eae3dc175ee58081a8099b66f1d0437"
  "61e3cdb49e4a9402890830395264dcb65127630a53550bb0a3e942c6644267b7"
  "5cd33bf1cb8d8fbcfb1b88ced120747e3ad90881cc7b2d2c8f0c1e5423321482"
  "79d09649c03270bcb9632c4d51fd1a7a168208eb1d6d04f94da86db850396281"
  "f31813510f333b68c4f3c1fdf9090291ac9f80d4bd440fae5c1e47220ddd2a68"
  "47158670a476ec0be66150316a847240fa4bbeb9a894d7f90fa18275dbc7f0e9"
  "e8dbb031456ab60f0495cb3db4c80d6cb73671ba617f812479c50212ccca9e67";

// public exponent
static const char *hex_e = "010001";

// private exponent
static const char *hex_d =
  "0e84373ae8ee6da8cb92d43175994b2e300536841fdc2e282c4f271b51aa420f"
  "2a40574860fb37f90745b9257b1722701bd5bd479f9e51497f1acdeda34edc11"
  "597692cddea37f32e8f74d0b85879268b7cf8538dc67df95f6f461cb0d2117af"
  "44768a1c875476dcd040460f5f9698438a9cead4185aaed6ad457c298bfce051"
  "22e8fb84028a03eda5622c10a5f5303259914c4f427d67afb177c8cf459890fc"
  "f5cbd0ff20704583715a1b6a385af1b1c34311bae3a899d709e9bc2899aa4642"
  "055a05f565326f04508c4be52c49496c291f542e81b175bcb0e03bf274a5a265"
  "af1923350f419b00bce8389bc67f30a732dc90d09be7c89436a5df7301b668cb"
  "f1090a89c7c48cbc3a433a326916f842d7dcbefb834b8d74775909ed7d0a8a9e"
  "b1a2636a6d134220695a9ca6e03a363317b6d2df11c08c9ff9326dd47df90efa"
  "df8be58e05b0ae1e95c32238871239259e240fb8a6ffd83b49b0a5bf75d15413"
  "cfd8ea2166638580ccf32c5740a4b5f23e1b213d3775d919967198222475e2a1";


// p
static const char *hex_p =
  "ea5640bbc5535566424d91d3f7421b09fb05702a43e4efa31e6cd1947edb20b3"
  "3b564182ce682a42336dc4ec11bd3adcb355f372e436df97d888888c242360eb"
  "fdd75cc3edd9c3bf51d215c0aabc821f984305783c5677cf2f1ab6ae06907544"
  "8ed55cbea218ee6378253e80ea3f4af62e4eaeb48ab33f19f7e199d51cc05f92"
  "71037972edfeb2922439718a42cc4187c88b7c31d44608a5f641473ea3bbbaea"
  "3338d43059f3de1612cd19058d85b470b3c95824cf659eb897f93b110f1bd3d9";

// q
static const char *hex_q =
  "cfab4117838cdefc5410c543c1b942e97c9753de4b1e05b567e8292bdd257133"
  "51aa6b8109f7e4491944ca9a99b968b48c78040cb8d87bc1271422ea9e3d309e"
  "bed4965f8b4bcb32b8ed3daeb0639dd1bd63986410a3a8c06e8c034c5c6a06da"
  "e4bbdb307ee2c198b69afc67901d0a19b51f00ae0723ce9befe56d476d6f794d"
  "55c67e61f9c8bf76c3774b02c1005f3efa1465359b9b10e97da33c44703da11f"
  "1ef0455c74acf7dffe3b7be8711ffa2ae678d48b8b0e4b9e8bccbc9e8b1bdc3f";

// dp = d mod (p-1)
static const char *hex_dp =
  "80f75f40f7e45907a24dd687f578683121f968359a901062918809ffd3a0fd6a"
  "26a9ddfc0364c87d0e98c6dbb51793a18b012eae7872cab362f421521f416941"
  "f7bde2cbe1c70b37ebebd714e5e2412aea3d587147a3bee443644c4d92474682"
  "a8a93c159e58623a54110b491fa21dbb46d8fec555e038462e69f6a396e338b5"
  "fb8491fe7284cdfa27fd85433667fb58a34240e39b93bf86b6f44e25672f163b"
  "765d3c4a2ff74aae93425516fd402c822a30115690ddb87097130f32e041cc61";

// dq = d mod (q-1)
static const char *hex_dq =
  "39d37d0f9820fce294620b1bfff09f7236b048b9487f76a579e68ab85d1f14f3"
  "6e551f14527b458519552f79773ecaaa23c733917b5344ba9730233ce38d3461"
  "afcfb083b05d0d9af525929c771f760db647ea624ac3d7b4a5d3b503696458be"
  "511d023ef1c620946e9c9f9612ea132aef654fa225f8d18a5875b1454772d7fb"
  "31dc50cae56c01ec87274baadba547e058709f721aff45e94e83cabf5fe5b95c"
  "da179ba8d0106e0160609df32eb4f1cb4a5bf10b5e503fbc493f5c726557ffaf";

// qinv = q^(-1) mod p
static const char *hex_qinv =
  "ae172813b4ef72775c2798b194348355cb7e7f74947d364b83f6e296e9e00559"
  "efb482990ad4fb335b9cb6ed7c68d5a19d244bade44292d94f33010f3815a991"
  "c0211990a002ef686c35ecd3e0602129bb1e35bf9cd5663b52ce9c97154fcfca"
  "8d5403e6c59de8e785ee64b3ab6b7593f0c899ea9f823f22b5cbeb766b8fbe8b"
  "232143dd9a28c0f0550b87fedb19cdf52e02009773b9cdc722cace719b3665d9"
  "3bf21dadac7d5669bbfb14000ef48f66c174bbc24739987c3a6b20eb9da62152";

#define KEY_BYTES 384 // 3072 bits / 8

/* ------------------ 工具函数 ------------------ */

static void hex2bin(const char *hex, uint8_t *out, size_t outlen) {
    for (size_t i = 0; i < outlen; i++) {
        sscanf(hex + 2 * i, "%2hhx", &out[i]);
    }
}

static void print_hex(const char *label, const uint8_t *buf, size_t len) {
    printf("%s:", label);
    for (size_t i = 0; i < len; i++) printf("%02x", buf[i]);
    printf("\n");
}

void bignum_from_bytes(struct bn *bn, const uint8_t *buf, size_t len) {
    bignum_init(bn);
    struct bn t, r, tmp;
    bignum_init(&t);
    bignum_init(&r);
    bignum_from_int(&t, 1);

    for (size_t i = 0; i < len; ++i) {
        bignum_from_int(&tmp, buf[i]);
        bignum_mul(&tmp, &t, &tmp);
        bignum_add(bn, &tmp, &r);
        bignum_assign(bn, &r);
        bignum_from_int(&tmp, 256);
        bignum_mul(&t, &tmp, &t);
    }
}


static void bignum_from_hex(struct bn *out, const char *hex) {
    size_t len = strlen(hex) / 2;
    uint8_t *tmp = malloc(len);
    hex2bin(hex, tmp, len);
    bignum_from_bytes(out, tmp, len); // 需要你实现 bignum_from_bytes()
    free(tmp);
}

static void bignum_to_bytes(struct bn *bn, uint8_t *buf, size_t len) {
    size_t bn_bits = bignum_numbits(bn);
    size_t bn_bytes = (bn_bits + 7) / 8;
    memset(buf, 0, len);
    for (size_t i = 0; i < bn_bytes; i++) {
        struct bn q, r;
        struct bn b256;
        bignum_from_int(&b256, 256);
        bignum_divmod(bn, &b256, &q, &r);
        buf[len - i - 1] = r.array[0];
        *bn = q;
    }
}

/* ------------------ Montgomery模幂 ------------------ */

void montMult(struct bn*  x, struct bn*  y, struct bn*  m, int mBits, struct bn*  out){

	struct bn t;
	bignum_init(&t);

	int i;
	for(i = mBits; i > 0 ; i--){					//efficient loop exit

		int t0Bit = bignum_getbit(&t,0);
		int xiBit = bignum_getbit(x, mBits - i);	//loop exit requires subtraction here
		int y0Bit = bignum_getbit(y,0);
		int op = t0Bit + (xiBit * y0Bit);

		if(xiBit == 1){
			bignum_add(&t, y, &t);
		}

		if(op == 1){
			bignum_add(&t, m, &t);
		}

		bignum_rshift(&t,&t, 1);
	}

	if(bignum_cmp(&t, m) >= 0){
		bignum_sub(&t,m,&t);
	}

	bignum_assign(out,&t);
}

void montgomery_modexp(struct bn *base, struct bn *exp, struct bn *mod, struct bn *out) {
    struct bn r2, one, a_mont, x, res;
    int bits = bignum_numbits(mod);
    bignum_from_int(&one, 1);
    bignum_lshift(&one, &r2, 2 * bits);       // r2 = R^2
    bignum_mod(&r2, mod, &r2);                // r2 = R^2 mod m
    bignum_mod(base, mod, &x);
    montMult(&x, &r2, mod, bits, &a_mont);    // a_mont = a*R mod m
    montMult(&one, &r2, mod, bits, &res);     // res = 1*R mod m

    for (int i = bignum_numbits(exp) - 1; i >= 0; i--) {
        montMult(&res, &res, mod, bits, &res);
        if (bignum_getbit(exp, i)) {
            montMult(&res, &a_mont, mod, bits, &res);
        }
    }

    struct bn one_mont;
    bignum_from_int(&one_mont, 1);
    montMult(&res, &one_mont, mod, bits, out);
}

/* ------------------ RSA CRT 签名 ------------------ */

void rsa_crt_sign(struct bn *m, struct bn *p, struct bn *q, struct bn *dp,
                  struct bn *dq, struct bn *qinv, struct bn *out) {
    struct bn m1, m2, h, s, tmp;

    montgomery_modexp(m, dp, p, &m1);
    montgomery_modexp(m, dq, q, &m2);

    if (bignum_cmp(&m1, &m2) >= 0) {
        bignum_sub(&m1, &m2, &tmp);
    } else {
        struct bn diff;
        bignum_sub(&m2, &m1, &diff);
        bignum_sub(p, &diff, &tmp);
    }

    bignum_mul(&tmp, qinv, &h);
    bignum_mod(&h, p, &h);

    bignum_mul(&h, q, &s);
    bignum_add(&s, &m2, out);
}

/* ------------------ 哈希并签名 ------------------ */

void hash_sign(uint8_t *input, size_t input_len, uint8_t *output) {
    uint8_t hash[32];
//    sha256_ni_transform(hash, input, input_len / 64);

    struct bn m, p, q, dp, dq, qinv, sig;
    bignum_from_bytes(&m, hash, 32);
    bignum_from_hex(&p, hex_p);
    bignum_from_hex(&q, hex_q);
    bignum_from_hex(&dp, hex_dp);
    bignum_from_hex(&dq, hex_dq);
    bignum_from_hex(&qinv, hex_qinv);

    rsa_crt_sign(&m, &p, &q, &dp, &dq, &qinv, &sig);
    bignum_to_bytes(&sig, output, KEY_BYTES);
    print_hex("Signature", output, KEY_BYTES);
}

/* ------------------ 主函数 ------------------ */

int main(void) {
    uint8_t *input = malloc(4096);
    uint8_t *output = malloc(KEY_BYTES);
    for (int i = 0; i < 4096; i++) input[i] = 0x11;

    hash_sign(input, 4096, output);
    free(input); free(output);
    return 0;
}

